package Chess;

import java.util.ArrayList;

import zen.core.Zen;

public class Queen extends Piece{

	@Override
	public Move[] getMoves() {
		ArrayList <Move> moves = new ArrayList <Move>();
		int x = getX() + 1;
		int y = getY();
		
		while (isValid(x,y)) {
			if(isEmpty(x,y) || isOpponent(x,y)) {
				moves.add(new Move(this, x, y));
			}
			 if(! isEmpty(x,y) || isOpponent(x,y)){
				break;
			}
			if(isOpponent(x,y)){
				break;
			}
			x ++;
			
		}
		 x = getX() - 1;
		 y= getY();

		while (isValid(x,y)) {
			if(isEmpty(x,y) || isOpponent(x,y)) {
				moves.add(new Move(this, x, y));
			}
			 if(! isEmpty(x,y) || isOpponent(x,y)){
				break;
			}
			if(isOpponent(x,y)){
				break;
			}
			x --;
			
		}
		x = getX();
		y = getY() + 1;
		
		while (isValid(x,y)) {
			if(isEmpty(x,y) || isOpponent(x,y)) {
				moves.add(new Move(this, x, y));
			}
			 if(! isEmpty(x,y) || isOpponent(x,y)){
				break;
			}
			if(isOpponent(x,y)){
				break;
			}
			y ++;
			
		}
		x = getX();
		y = getY() - 1;
		while (isValid(x,y)) {
			if(isEmpty(x,y) || isOpponent(x,y)) {
				moves.add(new Move(this, x, y));
			}
			 if(! isEmpty(x,y) || isOpponent(x,y)){
				break;
			}
			if(isOpponent(x,y)){
				break;
			}
			y --;
			
		}
		 x = getX() + 1;
		 y = getY() + 1;
		while(isValid(x,y)){
			
				if(isEmpty(x,y) || isOpponent(x,y)) {
					moves.add(new Move(this, x, y));
				}
				 if(! isEmpty(x,y) || isOpponent(x,y)){
					break;
				}
				if(isOpponent(x,y)){
					break;
				}
				x ++;
				y ++;
			}
			 x = getX() - 1;
			 y = getY() - 1;

			while (isValid(x,y)) {
				if(isEmpty(x,y) || isOpponent(x,y)) {
					moves.add(new Move(this, x, y));
				}
				 if(! isEmpty(x,y) || isOpponent(x,y)){
					break;
				}
				if(isOpponent(x,y)){
					break;
				}
				x --;
				y--;
			}
			x = getX() + 1;
			y = getY() - 1;
			while (isValid(x,y)) {
				if(isEmpty(x,y) || isOpponent(x,y)) {
					moves.add(new Move(this, x, y));
				}
				 if(! isEmpty(x,y) || isOpponent(x,y)){
					break;
				}
				if(isOpponent(x,y)){
					break;
				}
				x ++;
				y--;
				
			}
			 x = getX() - 1;
			 y = getY() + 1;

			while (isValid(x,y)) {
				if(isEmpty(x,y) || isOpponent(x,y)) {
					moves.add(new Move(this, x, y));
				}
				 if(! isEmpty(x,y) || isOpponent(x,y)){
					break;
				}
				if(isOpponent(x,y)){
					break;
				}
				x --;
				y ++;
				
			}
		
		return moves.toArray(new Move[moves.size()]);
		
	}

	@Override
	public void draw() {
		int x = getX() * Board.SCALE, 
	            y = getY() * Board.SCALE, 
	            s = Board.SCALE;

	        Zen.setColor(getColor());

	        Zen.fillPolygon(
	            new int[] { x + s / 6, x + s / 4, x + s * 3 / 4,
	                x + s * 5 / 6 , x + s * 2 / 3, x + s / 2,
	                x + s / 3}, 
	            new int[] { y + s / 6, y + s * 3 / 4, y + s * 3 / 4,
	                y + s / 6, y + s / 2, y + s / 4,
	                y + s / 2}
	        );

		
	}

}
